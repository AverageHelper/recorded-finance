openapi: 3.0.1
info:
  title: Recorded Finance Auth/Storage Server
  version: 0.8.6
  description: This is the Recorded Finance Server. All the server does is store data given to it by the client. The server controls access to the data with basic password-based auth with optional time-based multi-factor auth. The Recorded Finance client does most of the hard work of encrypting the user's data. You can read Recorded Finance's source code on [Codeberg](https://codeberg.org/RecordedFinance/recorded-finance).
  license:
    name: GNU General Public License v3.0
    url: https://codeberg.org/RecordedFinance/recorded-finance/src/branch/main/LICENSE
externalDocs:
  description: Find out more about Recorded Finance
  url: https://recorded.finance
servers:
  - url: https://recorded.finance/api
tags:
  - name: misc
    description: Make sure everything works
  - name: auth
    description: User authentication
  - name: database
    description: Arbitrary persistent data storage
paths:
  "/v0":
    get:
      tags:
        - misc
      summary: Get back a silly response
      operationId: silly
      security: [] # No security, public info
      responses:
        200:
          description: The server works
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    enum:
                      - "lol"
  "/v0/ping":
    get:
      tags:
        - misc
      summary: Make sure the server is working
      operationId: ping
      security: [] # No security, public info
      responses:
        200:
          description: The server works
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    enum:
                      - "Pong!"
  "/v0/version":
    get:
      tags:
        - misc
      summary: Get the server's version information
      operationId: version
      security: [] # No security, public info
      responses:
        200:
          description: Gets the server's current version.
          content:
            application/json:
              schema:
                type: object
                required: [version, message]
                properties:
                  version:
                    type: string
                    example: "1.3.0"
                  message:
                    type: string
                    example: "Recorded Finance Server v1.3.0"

  "/v0/join":
    post:
      tags:
        - auth
      summary: Create a new account
      operationId: create-account
      security: [] # No security, credentials passed in body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [account, password]
              properties:
                account:
                  type: string
                  minLength: 1
                  maxLength: 191
                  description: An identifier (or username) chosen for the user's account.
                    The user may change this later.
                password:
                  type: string
                  minLength: 1
                  maxLength: 65535
                  description: A passphrase to access the user's account. The user may change this later.
      responses:
        200:
          description: Account has been added to the database.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - access_token
                  - pubnub_token
                  - pubnub_cipher_key
                  - uid
                  - totalSpace
                  - usedSpace
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
                  access_token:
                    type: string
                    description: Temporary bearer token used to authenticate future requests
                  pubnub_token:
                    type: string
                    description: Temporary token used to authenticate requests to establish WebSocket connections.
                  pubnub_cipher_key:
                    type: string
                    description: Cipher key that the user should use to decrypt PubNub messages.
                  uid:
                    type: string
                    description: The user's persistent UID, different from the given account ID
                  totalSpace:
                    type: number
                    example: 1000000
                    description: "The number of total bytes the server has allocated for the user."
                  usedSpace:
                    type: number
                    example: 85000
                    description: "The number of bytes the user has stored."
        400:
          description: Missing one or more required parameters
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: "Improper parameter types"
        409:
          description: An account with the given ID already exists
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "account-conflict"
                  message:
                    type: string
                    example: "An account with that ID already exists"
        423:
          description: We aren't accepting new users right now.
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "user-quota-exceeded"
                  message:
                    type: string
                    example: "We're full at the moment. Try again later!"
  "/v0/login":
    post:
      tags:
        - auth
      summary: Get an auth token for an existing account.
      operationId: login-account
      security: [] # No security, credentials passed in body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [account, password]
              type: object
              properties:
                account:
                  type: string
                  minLength: 1
                  maxLength: 191
                  description: An identifier (or username) chosen for the user's account.
                password:
                  type: string
                  minLength: 1
                  maxLength: 65535
                  description: A passphrase to access the user's account.
      responses:
        200:
          description: Successfully authenticated with passphrase. Further validation may be needed.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - access_token
                  - pubnub_token
                  - pubnub_cipher_key
                  - validate
                  - uid
                  - totalSpace
                  - usedSpace
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
                  access_token:
                    type: string
                    description: Temporary bearer token used to authenticate future requests.
                  pubnub_token:
                    type: string
                    description: Temporary token used to authenticate requests to establish WebSocket connections.
                  pubnub_cipher_key:
                    type: string
                    description: Cipher key that the user should use to decrypt PubNub messages.
                  validate:
                    type: string
                    enum:
                      - "none"
                      - "totp"
                    description: The sort of extra validation that's needed before the user may access their data. The value is `"none"` if the user's account needs no further validation.
                  uid:
                    type: string
                    description: The user's persistent UID, different from the given account ID.
                  totalSpace:
                    type: number
                    example: 1000000
                    description: The number of total bytes the server has allocated for the user.
                  usedSpace:
                    type: number
                    example: 85000
                    description: The number of bytes the user has stored.
        400:
          description: Missing one or more required parameters
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: "Improper parameter types"
        403:
          description: The given passphrase does not match, or the given account does
            not exist
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "wrong-credentials"
                  message:
                    type: string
                    example: "Incorrect account ID or passphrase"
  "/v0/totp/validate":
    post:
      tags:
        - auth
      summary: Validate a time-based code for authentication. Must have obtained an access token previously. Successful validations return a new access token to be used in subsequent requests.
      operationId: validate-totp
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
                  description: The code to validate. Normally 6 characters long.
      responses:
        200:
          description: Successfully validated the time-based code. The user must now provide a TOTP to validate initial access or any sensitive operations.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - access_token
                  - pubnub_token
                  - pubnub_cipher_key
                  - uid
                  - totalSpace
                  - usedSpace
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
                  access_token:
                    type: string
                    description: Temporary bearer token used to authenticate future requests.
                  pubnub_token:
                    type: string
                    description: Temporary token used to authenticate requests to establish WebSocket connections.
                  pubnub_cipher_key:
                    type: string
                    description: Cipher key that the user should use to decrypt PubNub messages.
                  recovery_token: # optional
                    type: string
                    description: A recovery code that will be a valid TOTP code exactly once. Only provided if this is the first time this TOTP secret was validated. The user should keep this value safe, as it allows anyone with the user's password access to the account.
                  uid:
                    type: string
                    description: The user's persistent UID, different from the account ID used to sign in.
                  totalSpace:
                    type: number
                    example: 1000000
                    description: The number of total bytes the server has allocated for the user.
                  usedSpace:
                    type: number
                    example: 85000
                    description: The number of bytes the user has stored.
        400:
          description: Missing one or more required parameters.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: "Improper parameter types"
        403:
          description: The given token is invalid, or a valid session token was not provided.
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
                      - "wrong-mfa-credentials"
        409:
          description: The user does not have a TOTP secret set.
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "totp-secret-missing"
  "/v0/totp/secret":
    get:
      tags:
        - auth
      summary: Generates a new TOTP secret for the user. If the user has already enabled 2FA, then a 409 status is returned.
      operationId: get-totp-secret
      security:
        - jwt: []
      responses:
        200:
          description: Got a new secret.
          content:
            application/json:
              schema:
                type: object
                required: [message, secret]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
                  secret:
                    type: string
                    description: A TOTP configuration URI, to be displayed to the user as, for example, a QR code. The user should keep this value safe, as it is the only way to generate time-based authentication codes.
        403:
          description: The caller did not send valid session cookies.
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
        409:
          description: The user already has a TOTP secret set. We should not override it.
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "totp-conflict"
    delete:
      tags:
        - auth
      summary: Disables the user's TOTP requirement, and deletes the stored TOTP secret.
      operationId: delete-totp-secret
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password, token]
              properties:
                password:
                  type: string
                  minLength: 1
                  maxLength: 65535
                  description: The passphrase to access the account.
                token:
                  type: string
                  description: The current TOTP to access the account.
      responses:
        200:
          description: The secret is gone.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
        400:
          description: Missing one or more required parameters.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: "Improper parameter types"
        403:
          description: The caller did not send valid session cookies, or the password was invalid.
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
                      - "wrong-credentials"
                      - "wrong-mfa-credentials"
  "/v0/session":
    get:
      tags:
        - auth
      summary: Get a new auth token for an existing session
      operationId: renew-session
      security:
        - jwt: []
      responses:
        200:
          description: Successfully renewed session
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - account
                  - access_token
                  - pubnub_token
                  - pubnub_cipher_key
                  - requiredAddtlAuth
                  - uid
                  - totalSpace
                  - usedSpace
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
                  account:
                    type: string
                    description: The ID of the user's account.
                  access_token:
                    type: string
                    description: Temporary bearer token used to authenticate future requests
                  pubnub_token:
                    type: string
                    description: Temporary token used to authenticate requests to establish WebSocket connections.
                  pubnub_cipher_key:
                    type: string
                    description: Cipher key that the user should use to decrypt PubNub messages.
                  requiredAddtlAuth:
                    type: array
                    items:
                      enum:
                        - "totp"
                    description: The sort of extra validation that the user has registered. Might be empty.
                  uid:
                    type: string
                    description: The user's persistent UID, different from the given account ID
                  totalSpace:
                    type: number
                    example: 1000000
                    description: "The number of total bytes the server has allocated for the user."
                  usedSpace:
                    type: number
                    example: 85000
                    description: "The number of bytes the user has stored."
        403:
          description: The caller did not send valid session cookies.
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
                      - "not-owner"
  "/v0/logout":
    post:
      tags:
        - auth
      summary: Invalidate the request's bearer token.
      operationId: log-out
      security:
        - jwt: []
      responses:
        200:
          description: Successfully logged out.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
  "/v0/leave":
    post:
      tags:
        - auth
      summary: Destroy the user's data and account credentials.
      operationId: leave-forever
      security: [] # No security, credentials passed in body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [account, password]
              properties:
                account:
                  type: string
                  maxLength: 191
                  description: The identifier for the user's account.
                password:
                  type: string
                  minLength: 1
                  maxLength: 65535
                  description: The passphrase to access the account.
                token: # optional
                  type: string
                  description: The TOTP token. Required if the user's account requires TOTP 2FA.
      responses:
        200:
          description: Operation succeeded.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
        400:
          description: Missing one or more required parameters.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: "Improper parameter types"
        403:
          description: The given passphrase does not match, a required TOTP token was not provided, or the given account does not exist.
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "missing-mfa-credentials"
                      - "wrong-credentials"
                      - "wrong-mfa-credentials"
                  message:
                    type: string
                    example: "Incorrect account ID or passphrase"
  "/v0/updatepassword":
    post:
      tags:
        - auth
      summary: Change the user's password.
      operationId: change-password
      security: [] # No security, credentials passed in body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [account, password, newpassword]
              properties:
                account:
                  type: string
                  maxLength: 191
                  description: The identifier for the user's account.
                password:
                  type: string
                  minLength: 1
                  maxLength: 65535
                  description: The current passphrase to access the account.
                token: # optional
                  type: string
                  description: The TOTP token. Required if the user's account requires TOTP 2FA.
                newpassword:
                  type: string
                  minLength: 1
                  maxLength: 65535
                  description: The new passphrase to access the account from now on.
      responses:
        200:
          description: Operation succeeded.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
        400:
          description: Missing one or more required parameters.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: "Improper parameter types"
        403:
          description: The given passphrase does not match, a required TOTP token was not provided, or the given account does not exist.
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "missing-mfa-credentials"
                      - "wrong-credentials"
                      - "wrong-mfa-credentials"
                  message:
                    type: string
                    example: "Incorrect account ID or passphrase"
  "/v0/updateaccountid":
    post:
      tags:
        - auth
      summary: Change the user's account ID.
      operationId: change-account-id
      security: [] # No security, credentials passed in body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [account, newaccount, password]
              properties:
                account:
                  type: string
                  maxLength: 191
                  description: The identifier for the user's account.
                newaccount:
                  type: string
                  description: The new identifier to access the account from now on.
                password:
                  type: string
                  description: The current passphrase to access the account.
                token: # optional
                  type: string
                  description: The TOTP token. Required if the user's account requires TOTP 2FA.
      responses:
        200:
          description: Operation succeeded.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
        400:
          description: Missing one or more required parameters.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: "Improper parameter types"
        403:
          description: The given passphrase does not match, a required TOTP token was not provided, or the given account does not exist.
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "missing-mfa-credentials"
                      - "wrong-credentials"
                      - "wrong-mfa-credentials"
                  message:
                    type: string
                    example: "Incorrect account ID or passphrase"
  "/v0/db/users/{uid}":
    post:
      tags:
        - database
      summary: "Perform a batch of up to 500 document writes for a user"
      description: Does nothing when the batch is empty
      operationId: batch-write
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              minItems: 0
              maxItems: 500
              items:
                oneOf:
                  - type: object
                    required: [type, ref, data]
                    properties:
                      type:
                        type: string
                        enum:
                          - set
                      ref:
                        type: object
                        required: [collectionId, documentId]
                        properties:
                          collectionId:
                            $ref: "#/components/schemas/CollectionID"
                          documentId:
                            type: string
                      data:
                        $ref: "#/components/schemas/DataItem"
                  - type: object
                    required: [type, ref]
                    properties:
                      type:
                        type: string
                        enum:
                          - delete
                      ref:
                        type: object
                        required: [collectionId, documentId]
                        properties:
                          collectionId:
                            $ref: "#/components/schemas/CollectionID"
                          documentId:
                            type: string
      responses:
        200:
          description: All operations successful
          content:
            application/json:
              schema:
                type: object
                required: [message, totalSpace, usedSpace]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
                  totalSpace:
                    type: number
                    example: 1000000
                    description: "The number of total bytes the server has allocated for the user."
                  usedSpace:
                    type: number
                    example: 85000
                    description: "The number of bytes the user has stored."
        400:
          description: Invalid parameters or data
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: "Invalid data"
        403:
          description: The caller does not have permission to access the resource
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
                      - "not-owner"
        404:
          description: The collection not found
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "not-found"
                  message:
                    type: string
                    example: "No data found"
    parameters:
      - name: uid
        in: path
        description: The ID of the user who owns the data. Should match the ID of the signed-in user.
        required: true
        schema:
          type: string
  "/v0/db/users/{uid}/{coll}":
    get:
      tags:
        - database
      summary: Get all documents in a collection
      operationId: get-collection
      security:
        - jwt: []
      responses:
        200:
          description: The collection was found, but might be empty
          content:
            application/json:
              schema:
                type: object
                required: [data]
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        # TODO: Instead link to Keys and DataItem
                        - type: object
                          required: [_id, dekMaterial, passSalt]
                          properties:
                            _id:
                              type: string
                              description: The document ID.
                            dekMaterial:
                              type: string
                            passSalt:
                              type: string
                            oldDekMaterial:
                              type: string
                            oldPassSalt:
                              type: string
                        - type: object
                          required: [_id, ciphertext, objectType, cryption]
                          properties:
                            _id:
                              type: string
                            ciphertext:
                              type: string
                            objectType:
                              type: string
                            cryption:
                              type: string
                              enum:
                                - v0
                                - v1
        403:
          description: The caller does not have permission to access the resource
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
                      - "not-owner"
        404:
          description: The collection was not found.
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "not-found"
                  message:
                    type: string
                    example: "No data found"
    delete:
      tags:
        - database
      summary: Delete all documents in a collection
      operationId: delete-collection
      security:
        - jwt: []
      responses:
        200:
          description: The operation was successful
          content:
            application/json:
              schema:
                type: object
                required: [message, totalSpace, usedSpace]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
                  totalSpace:
                    type: number
                    example: 1000000
                    description: "The number of total bytes the server has allocated for the user."
                  usedSpace:
                    type: number
                    example: 85000
                    description: "The number of bytes the user has stored."
        403:
          description: The caller does not have permission to access the resource
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
                      - "not-owner"
        404:
          description: The collection was not found
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "not-found"
                  message:
                    type: string
                    example: "No data found"
    parameters:
      - name: uid
        in: path
        description: The ID of the user who owns the data. Should match the ID of the signed-in user.
        required: true
        schema:
          type: string
      - name: coll
        in: path
        description: The ID of the collection where data resides.
        required: true
        schema:
          $ref: "#/components/schemas/CollectionID"
  "/v0/db/users/{uid}/{coll}/{doc}":
    get:
      tags:
        - database
      summary: Get a document
      operationId: get-doc
      security:
        - jwt: []
      responses:
        200:
          description: Fetch succeeded, but the document might not exist
          content:
            application/json:
              schema:
                type: object
                required: [data]
                properties:
                  data:
                    oneOf:
                      # TODO: Instead link to Keys and DataItem
                      - type: object
                        nullable: true
                        required: [_id, dekMaterial, passSalt]
                        properties:
                          _id:
                            type: string
                            description: The document ID.
                          dekMaterial:
                            type: string
                          passSalt:
                            type: string
                          oldDekMaterial: # optional
                            type: string
                          oldPassSalt: # optional
                            type: string
                      - type: object
                        nullable: true
                        required: [_id, ciphertext, objectType, cryption]
                        properties:
                          _id:
                            type: string
                          ciphertext:
                            type: string
                          objectType:
                            type: string
                          cryption:
                            type: string
                            enum:
                              - v0
                              - v1
        403:
          description: The caller does not have permission to access the resource
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
                      - "not-owner"
        404:
          description: The collection was not found
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "not-found"
                  message:
                    type: string
                    example: "No data found"
    post:
      tags:
        - database
      summary: Add or update a document
      operationId: set-doc
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/DataItem"
                - $ref: "#/components/schemas/Keys"
      responses:
        200:
          description: Operation succeeded
          content:
            application/json:
              schema:
                type: object
                required: [message, totalSpace, usedSpace]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
                  totalSpace:
                    type: number
                    example: 1000000
                    description: "The number of total bytes the server has allocated for the user."
                  usedSpace:
                    type: number
                    example: 85000
                    description: "The number of bytes the user has stored."
        400:
          description: The provided data does not have the required properties for a document in this collection.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: "Invalid data"
        403:
          description: The caller does not have permission to access the resource
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
                      - "not-owner"
        404:
          description: The collection was not found
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "not-found"
                  message:
                    type: string
                    example: "No data found"
    delete:
      tags:
        - database
      summary: Delete a document and any associated binary data blobs
      operationId: delete-doc
      security:
        - jwt: []
      responses:
        200:
          description: Operation succeeded
          content:
            application/json:
              schema:
                type: object
                required: [message, totalSpace, usedSpace]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
                  totalSpace:
                    type: number
                    example: 1000000
                    description: "The number of total bytes the server has allocated for the user."
                  usedSpace:
                    type: number
                    example: 85000
                    description: "The number of bytes the user has stored."
        403:
          description: The caller does not have permission to access the resource
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
                      - "not-owner"
        404:
          description: The collection was not found
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "not-found"
                  message:
                    type: string
                    example: "No data found"
    parameters:
      - name: uid
        in: path
        description: The ID of the user who owns the data. Should match the ID of the signed-in user.
        required: true
        schema:
          type: string
      - name: coll
        in: path
        description: The ID of the collection where data resides.
        required: true
        schema:
          $ref: "#/components/schemas/CollectionID"
      - name: doc
        in: path
        description: The ID of the document where data resides.
        required: true
        schema:
          type: string
  "/v0/db/users/{uid}/attachments/{doc}/blob/{key}":
    get:
      tags:
        - database
      summary: Retrieve binary data previously attached to a document
      operationId: get-file
      security:
        - jwt: []
      responses:
        200:
          description: The file was found
          content:
            application/json:
              schema:
                type: object
                required: [message, data]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
                  data:
                    type: object
                    required: [contents, _id]
                    properties:
                      contents:
                        type: string
                      _id:
                        type: string
        400:
          description: Bad ID or file name
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: "Your UID or that file name don't add up to a valid path"
        403:
          description: The caller does not have permission to access the resource
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
                      - "not-owner"
        404:
          description: The file data was not found
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "not-found"
                  message:
                    type: string
                    example: "No data found"
    post:
      tags:
        - database
      summary: Attach binary data (at most 4.2 MB) to a document
      operationId: set-file
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary # utf-8
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                type: object
                required: [message, totalSpace, usedSpace]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
                  totalSpace:
                    type: number
                    example: 1000000
                    description: "The number of total bytes the server has allocated for the user."
                  usedSpace:
                    type: number
                    example: 85000
                    description: "The number of bytes the user has stored."
        400:
          description: Bad ID or file name
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: "Your UID or that file name don't add up to a valid path"
        403:
          description: The caller does not have permission to access the resource
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
                      - "not-owner"
        404:
          description: The file data was not found
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "not-found"
                  message:
                    type: string
                    example: "No data found"
        507:
          description: The user's storage quota has been exceeded. The user should delete some things before proceeding.
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "storage-quota-exceeded"
                  message:
                    type: string
                    example: "There is not enough room to write your data. Delete some stuff first."
    delete:
      tags:
        - database
      summary: Remove binary data from a document
      operationId: delete-file
      security:
        - jwt: []
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                type: object
                required: [message, totalSpace, usedSpace]
                properties:
                  message:
                    type: string
                    enum:
                      - "Success!"
                  totalSpace:
                    type: number
                    example: 1000000
                    description: "The number of total bytes the server has allocated for the user."
                  usedSpace:
                    type: number
                    example: 85000
                    description: "The number of bytes the user has stored."
        400:
          description: Bad ID or file name
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: "Your UID or that file name don't add up to a valid path"
        403:
          description: The caller does not have permission to access the resource
          content:
            application/json:
              schema:
                type: object
                required: [code]
                properties:
                  code:
                    type: string
                    enum:
                      - "expired-token"
                      - "missing-token"
                      - "not-owner"
        404:
          description: The file data was not found
          content:
            application/json:
              schema:
                type: object
                required: [code, message]
                properties:
                  code:
                    type: string
                    enum:
                      - "not-found"
                  message:
                    type: string
                    example: "No data found"
    parameters:
      - name: uid
        in: path
        description: The ID of the user who owns the data. Should match the ID of the signed-in user.
        required: true
        schema:
          type: string
      - name: doc
        in: path
        description: The ID of the document.
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: A string that refers to the binary data. For example, a file name.
        required: true
        schema:
          type: string
components:
  schemas:
    DataItem:
      type: object
      required: [ciphertext, objectType]
      properties:
        ciphertext:
          type: string
          maxLength: 65535
          description: The body of the encrypted item.
        objectType:
          type: string
          maxLength: 191
          description: A short string describing the data's collection.
        cryption:
          type: string
          enum:
            - v0
            - v1
          default: v0 # TODO: Don't fall back like this, lol
          description: A string identifying the type of encryption used. Informs the client how to decrypt the data. The server does not care about this value, since it cannot decrypt the user's data anyway.
    Keys:
      type: object
      required: [dekMaterial, passSalt]
      properties:
        dekMaterial:
          type: string
          maxLength: 65535
          description: Encrypted data that the client uses to derive the user's Data Encryption Key. The Data Encryption Key is used to en/decrypt the ciphertext of documents. The server cannot decrypt this key, since it never receives the user's plaintext password. The Data Encryption Key should rarely change, but the `dekMaterial` may change often.
        passSalt:
          type: string
          maxLength: 191
          description: The salt which the client used to generate the Password Key. The Password Key and the user's plaintext password are combined to decrypt the `dekMaterial` and retrieve the user's Data Encryption Key.
        oldDekMaterial:
          type: string
          maxLength: 65535
          description: The former `dekMaterial`. This value is used while changing the user's password, so the client has an opportunity to revert the password change if the user aborts the operation or something goes wrong.
        oldPassSalt:
          type: string
          maxLength: 191
          description: The former `passSalt`. This value is used while changing the user's password, so the client has an opportunity to revert the password change if the user aborts the operation or something goes wrong.
    CollectionID:
      type: string
      enum:
        - accounts
        - attachments
        - keys
        - locations
        - tags
        - transactions
        - users
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
